//******************************************************************************
//
// File:    TextItem.java
// Package: edu.rit.slides.items
// Unit:    Class edu.rit.slides.items.TextItem
//
// This Java source file is copyright (C) 2001-2004 by Alan Kaminsky. All rights
// reserved. For further information, contact the author, Alan Kaminsky, at
// ark@cs.rit.edu.
//
// This Java source file is part of the M2MI Library ("The Library"). The
// Library is free software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation; either version 2 of the License, or (at your option) any later
// version.
//
// The Library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// A copy of the GNU General Public License is provided in the file gpl.txt. You
// may also obtain a copy of the GNU General Public License on the World Wide
// Web at http://www.gnu.org/licenses/gpl.html or by writing to the Free
// Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
//******************************************************************************

package edu.rit.slides.items;

import java.awt.Font;
import java.awt.Graphics2D;

import java.awt.font.FontRenderContext;
import java.awt.font.LineMetrics;

import java.awt.geom.Rectangle2D;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

/**
 * Class TextItem provides a slide item consisting of a single line of text.
 * The text is all one font and color.
 * <P>
 * The line of text occupies a certain rectangular box. The text box includes
 * the text's ascenders and descenders, but not the leading. The text box may be
 * placed on the slide at one of nine positions relative to a specified "anchor
 * point" <TT>(x,y)</TT>. The text position is specified by one of the following
 * constants:
 * <UL>
 * <LI>
 * <TT>TextItem.ABOVE_LEFT</TT> -- The text box is above and to the left of the
 * anchor point; equivalently, the text box's lower right corner is located at
 * the anchor point.
 * <BR>&nbsp;
 * <LI>
 * <TT>TextItem.ABOVE</TT> -- The text box is above the anchor point;
 * equivalently, the text box's lower center point is located at the anchor
 * point.
 * <BR>&nbsp;
 * <LI>
 * <TT>TextItem.ABOVE_RIGHT</TT> -- The text box is above and to the right of
 * the anchor point; equivalently, the text box's lower left corner is located
 * at the anchor point.
 * <BR>&nbsp;
 * <LI>
 * <TT>TextItem.LEFT</TT> -- The text box is to the left of the anchor point;
 * equivalently, the text box's right center point is located at the anchor
 * point.
 * <BR>&nbsp;
 * <LI>
 * <TT>TextItem.CENTER</TT> -- The text box is centered on the anchor point;
 * equivalently, the text box's center point is located at the anchor point.
 * <BR>&nbsp;
 * <LI>
 * <TT>TextItem.RIGHT</TT> -- The text box is to the right of the anchor point;
 * equivalently, the text box's left center point is located at the anchor
 * point.
 * <BR>&nbsp;
 * <TT>TextItem.BELOW_LEFT</TT> -- The text box is below and to the left of the
 * anchor point; equivalently, the text box's upper right corner is located at
 * the anchor point.
 * <BR>&nbsp;
 * <LI>
 * <TT>TextItem.BELOW</TT> -- The text box is below the anchor point;
 * equivalently, the text box's upper center point is located at the anchor
 * point.
 * <BR>&nbsp;
 * <LI>
 * <TT>TextItem.BELOW_RIGHT</TT> -- The text box is below and to the right of
 * the anchor point; equivalently, the text box's upper left corner is located
 * at the anchor point.
 * </UL>
 * <P>
 * The text may optionally have a {@link Bullet </CODE>Bullet<CODE>} attached.
 * The bullet is always located to the left of the text. The offset from the
 * left side of the bullet to the left side of the text is specified when the
 * bullet object is constructed.
 *
 * @author  Alan Kaminsky
 * @version 10-Oct-2003
 */
public class TextItem
	extends FilledItem
	implements Externalizable
	{

// Exported constants.

	/**
	 * The text box is positioned above and to the left of the anchor point.
	 */
	public static final int ABOVE_LEFT = 0;

	/**
	 * The text box is positioned above the anchor point.
	 */
	public static final int ABOVE = 1;

	/**
	 * The text box is positioned above and to the right of the anchor point.
	 */
	public static final int ABOVE_RIGHT = 2;

	/**
	 * The text box is positioned to the left of the anchor point.
	 */
	public static final int LEFT = 3;

	/**
	 * The text box is centered on the anchor point.
	 */
	public static final int CENTER = 4;

	/**
	 * The text box is positioned to the right of the anchor point.
	 */
	public static final int RIGHT = 5;

	/**
	 * The text box is positioned below and to the left of the anchor point.
	 */
	public static final int BELOW_LEFT = 6;

	/**
	 * The text box is positioned below the anchor point.
	 */
	public static final int BELOW = 7;

	/**
	 * The text box is positioned below and to the right of the anchor point.
	 */
	public static final int BELOW_RIGHT = 8;

	/**
	 * The normal text font (sanserif, plain, 24 point).
	 */
	public static final Font NORMAL_FONT =
		new Font ("sanserif", Font.PLAIN, 24);

// Hidden data members.

	private static final long serialVersionUID = -7041647977076053802L;

	/**
	 * The text.
	 */
	protected String myText;

	/**
	 * The anchor point's X coordinate.
	 */
	protected double myAnchorX;

	/**
	 * The anchor point's Y coordinate.
	 */
	protected double myAnchorY;

	/**
	 * The text box's position relative to the anchor point.
	 */
	protected int myPosition;

	/**
	 * Text font.
	 */
	protected Font myFont;

	/**
	 * Bullet.
	 */
	protected Bullet myBullet;

// Exported constructors.

	/**
	 * Construct a new, empty text item.
	 */
	public TextItem()
		{
		}

	/**
	 * Construct a new text item with the given text and anchor point. The
	 * normal text position (TextItem.BELOW_RIGHT) is used. The normal font
	 * (sanserif, plain, 24 point) is used. The normal fill paint
	 * (ColorFill.BLACK) is used. The text has no bullet.
	 *
	 * @param  theText  Text. If null, no text is drawn.
	 * @param  x        X coordinate of anchor point.
	 * @param  y        Y coordinate of anchor point.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y)
		{
		this (theText, x, y, BELOW_RIGHT, NORMAL_FONT, ColorFill.BLACK, null);
		}

	/**
	 * Construct a new text item with the given text, anchor point, and text
	 * position. The normal font (sanserif, plain, 24 point) is used. The normal
	 * fill paint (ColorFill.BLACK) is used. The text has no bullet.
	 *
	 * @param  theText      Text. If null, no text is drawn.
	 * @param  x            X coordinate of anchor point.
	 * @param  y            Y coordinate of anchor point.
	 * @param  thePosition  Text position.
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>thePosition</TT> is not one of
	 *     the nine possible text positions.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 int thePosition)
		{
		this (theText, x, y, thePosition, NORMAL_FONT, ColorFill.BLACK, null);
		}

	/**
	 * Construct a new text item with the given text, anchor point, and font.
	 * The normal text position (TextItem.BELOW_RIGHT) is used. The normal fill
	 * paint (ColorFill.BLACK) is used. The text has no bullet.
	 *
	 * @param  theText  Text. If null, no text is drawn.
	 * @param  x        X coordinate of anchor point.
	 * @param  y        Y coordinate of anchor point.
	 * @param  theFont  Text font. If null, no text is drawn.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 Font theFont)
		{
		this (theText, x, y, BELOW_RIGHT, theFont, ColorFill.BLACK, null);
		}

	/**
	 * Construct a new text item with the given text, anchor point, text
	 * position, and font. The normal fill paint (ColorFill.BLACK) is used. The
	 * text has no bullet.
	 *
	 * @param  theText      Text. If null, no text is drawn.
	 * @param  x            X coordinate of anchor point.
	 * @param  y            Y coordinate of anchor point.
	 * @param  thePosition  Text position.
	 * @param  theFont      Text font. If null, no text is drawn.
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>thePosition</TT> is not one of
	 *     the nine possible text positions.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 int thePosition,
		 Font theFont)
		{
		this (theText, x, y, thePosition, theFont, ColorFill.BLACK, null);
		}

	/**
	 * Construct a new text item with the given text, anchor point, and fill
	 * paint. The normal text position (TextItem.BELOW_RIGHT) is used. The
	 * normal font (sanserif, plain, 24 point) is used. The text has no bullet.
	 *
	 * @param  theText  Text. If null, no text is drawn.
	 * @param  x        X coordinate of anchor point.
	 * @param  y        Y coordinate of anchor point.
	 * @param  theFill  Fill paint. If null, no text is drawn.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 Fill theFill)
		{
		this (theText, x, y, BELOW_RIGHT, NORMAL_FONT, theFill, null);
		}

	/**
	 * Construct a new text item with the given text, anchor point, text
	 * position, and fill paint. The normal font (sanserif, plain, 24 point) is
	 * used. The text has no bullet.
	 *
	 * @param  theText      Text. If null, no text is drawn.
	 * @param  x            X coordinate of anchor point.
	 * @param  y            Y coordinate of anchor point.
	 * @param  thePosition  Text position.
	 * @param  theFill      Fill paint. If null, no text is drawn.
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>thePosition</TT> is not one of
	 *     the nine possible text positions.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 int thePosition,
		 Fill theFill)
		{
		this (theText, x, y, thePosition, NORMAL_FONT, theFill, null);
		}

	/**
	 * Construct a new text item with the given text, anchor point, font, and
	 * fill paint. The normal text position (TextItem.BELOW_RIGHT) is used. The
	 * text has no bullet.
	 *
	 * @param  theText  Text. If null, no text is drawn.
	 * @param  x        X coordinate of anchor point.
	 * @param  y        Y coordinate of anchor point.
	 * @param  theFont  Text font. If null, no text is drawn.
	 * @param  theFill  Fill paint. If null, no text is drawn.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 Font theFont,
		 Fill theFill)
		{
		this (theText, x, y, BELOW_RIGHT, theFont, theFill, null);
		}

	/**
	 * Construct a new text item with the given text, anchor point, text
	 * position, font, and fill paint. The text has no bullet.
	 *
	 * @param  theText      Text. If null, no text is drawn.
	 * @param  x            X coordinate of anchor point.
	 * @param  y            Y coordinate of anchor point.
	 * @param  thePosition  Text position.
	 * @param  theFont      Text font. If null, no text is drawn.
	 * @param  theFill      Fill paint. If null, no text is drawn.
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>thePosition</TT> is not one of
	 *     the nine possible text positions.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 int thePosition,
		 Font theFont,
		 Fill theFill)
		{
		this (theText, x, y, thePosition, theFont, theFill, null);
		}

	/**
	 * Construct a new text item with the given text, anchor point, and bullet.
	 * The normal text position (TextItem.BELOW_RIGHT) is used. The normal font
	 * (sanserif, plain, 24 point) is used. The normal fill paint
	 * (ColorFill.BLACK) is used.
	 *
	 * @param  theText    Text. If null, no text is drawn.
	 * @param  x          X coordinate of anchor point.
	 * @param  y          Y coordinate of anchor point.
	 * @param  theBullet  Bullet. If null, the text has no bullet.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 Bullet theBullet)
		{
		this
			(theText, x, y, BELOW_RIGHT,
			 NORMAL_FONT, ColorFill.BLACK, theBullet);
		}

	/**
	 * Construct a new text item with the given text, anchor point, text
	 * position, and bullet. The normal font (sanserif, plain, 24 point) is
	 * used. The normal fill paint (ColorFill.BLACK) is used.
	 *
	 * @param  theText      Text. If null, no text is drawn.
	 * @param  x            X coordinate of anchor point.
	 * @param  y            Y coordinate of anchor point.
	 * @param  thePosition  Text position.
	 * @param  theBullet    Bullet. If null, the text has no bullet.
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>thePosition</TT> is not one of
	 *     the nine possible text positions.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 int thePosition,
		 Bullet theBullet)
		{
		this
			(theText, x, y, thePosition,
			 NORMAL_FONT, ColorFill.BLACK, theBullet);
		}

	/**
	 * Construct a new text item with the given text, anchor point, font, and
	 * bullet. The normal text position (TextItem.BELOW_RIGHT) is used. The
	 * normal fill paint (ColorFill.BLACK) is used.
	 *
	 * @param  theText    Text. If null, no text is drawn.
	 * @param  x          X coordinate of anchor point.
	 * @param  y          Y coordinate of anchor point.
	 * @param  theFont    Text font. If null, no text is drawn.
	 * @param  theBullet  Bullet. If null, the text has no bullet.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 Font theFont,
		 Bullet theBullet)
		{
		this
			(theText, x, y, BELOW_RIGHT,
			 theFont, ColorFill.BLACK, theBullet);
		}

	/**
	 * Construct a new text item with the given text, anchor point, text
	 * position, font, and bullet. The normal fill paint (ColorFill.BLACK) is
	 * used.
	 *
	 * @param  theText      Text. If null, no text is drawn.
	 * @param  x            X coordinate of anchor point.
	 * @param  y            Y coordinate of anchor point.
	 * @param  thePosition  Text position.
	 * @param  theFont      Text font. If null, no text is drawn.
	 * @param  theBullet    Bullet. If null, the text has no bullet.
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>thePosition</TT> is not one of
	 *     the nine possible text positions.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 int thePosition,
		 Font theFont,
		 Bullet theBullet)
		{
		this
			(theText, x, y, thePosition,
			 theFont, ColorFill.BLACK, theBullet);
		}

	/**
	 * Construct a new text item with the given text, anchor point, fill paint,
	 * and bullet. The normal text position (TextItem.BELOW_RIGHT) is used. The
	 * normal font (sanserif, plain, 24 point) is used.
	 *
	 * @param  theText    Text. If null, no text is drawn.
	 * @param  x          X coordinate of anchor point.
	 * @param  y          Y coordinate of anchor point.
	 * @param  theFill    Fill paint. If null, no text is drawn.
	 * @param  theBullet  Bullet. If null, the text has no bullet.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 Fill theFill,
		 Bullet theBullet)
		{
		this
			(theText, x, y, BELOW_RIGHT,
			 NORMAL_FONT, theFill, theBullet);
		}

	/**
	 * Construct a new text item with the given text, anchor point, text
	 * position, fill paint, and bullet. The normal font (sanserif, plain, 24
	 * point) is used.
	 *
	 * @param  theText      Text. If null, no text is drawn.
	 * @param  x            X coordinate of anchor point.
	 * @param  y            Y coordinate of anchor point.
	 * @param  thePosition  Text position.
	 * @param  theFill      Fill paint. If null, no text is drawn.
	 * @param  theBullet    Bullet. If null, the text has no bullet.
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>thePosition</TT> is not one of
	 *     the nine possible text positions.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 int thePosition,
		 Fill theFill,
		 Bullet theBullet)
		{
		this
			(theText, x, y, thePosition,
			 NORMAL_FONT, theFill, theBullet);
		}

	/**
	 * Construct a new text item with the given text, anchor point, font, fill
	 * paint, and bullet. The normal text position (TextItem.BELOW_RIGHT) is
	 * used.
	 *
	 * @param  theText    Text. If null, no text is drawn.
	 * @param  x          X coordinate of anchor point.
	 * @param  y          Y coordinate of anchor point.
	 * @param  theFont    Text font. If null, no text is drawn.
	 * @param  theFill    Fill paint. If null, no text is drawn.
	 * @param  theBullet  Bullet. If null, the text has no bullet.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 Font theFont,
		 Fill theFill,
		 Bullet theBullet)
		{
		this
			(theText, x, y, BELOW_RIGHT,
			 theFont, theFill, theBullet);
		}

	/**
	 * Construct a new text item with the given text, anchor point, text
	 * position, font, fill paint, and bullet.
	 *
	 * @param  theText      Text. If null, no text is drawn.
	 * @param  x            X coordinate of anchor point.
	 * @param  y            Y coordinate of anchor point.
	 * @param  thePosition  Text position.
	 * @param  theFont      Text font. If null, no text is drawn.
	 * @param  theFill      Fill paint. If null, no text is drawn.
	 * @param  theBullet    Bullet. If null, the text has no bullet.
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>thePosition</TT> is not one of
	 *     the nine possible text positions.
	 */
	public TextItem
		(String theText,
		 double x,
		 double y,
		 int thePosition,
		 Font theFont,
		 Fill theFill,
		 Bullet theBullet)
		{
		super (theFill);
		if (ABOVE_LEFT > thePosition || thePosition > BELOW_RIGHT)
			{
			throw new IllegalArgumentException();
			}
		myText = theText;
		myAnchorX = x;
		myAnchorY = y;
		myPosition = thePosition;
		myFont = theFont;
		myBullet = theBullet;
		}

// Exported operations.

	/**
	 * Draw this slide item in the given graphics context. This method is
	 * allowed to change the graphics context's paint, stroke, and transform,
	 * and it doesn't have to change them back.
	 *
	 * @param  g2d  2-D graphics context.
	 */
	public void draw
		(Graphics2D g2d)
		{
		// Early return if we can't draw.
		if (myText == null || myFont == null || myFill == null) return;

		// Set up font and get metrics.
		Font oldFont = g2d.getFont();
		g2d.setFont (myFont);
		FontRenderContext frc = g2d.getFontRenderContext();
		Rectangle2D bounds = myFont.getStringBounds (myText, frc);
		LineMetrics metrics = myFont.getLineMetrics (myText, frc);
		double a = metrics.getAscent();
		double d = metrics.getDescent();
		double w = bounds.getWidth();
		double h = a + d;

		// Compute (x,y) coordinates of left end of text baseline.
		double x;
		double y;
		switch (myPosition)
			{
			case ABOVE_LEFT:
				x = myAnchorX - w;
				y = myAnchorY - d;
				break;
			case ABOVE:
				x = myAnchorX - w / 2;
				y = myAnchorY - d;
				break;
			case ABOVE_RIGHT:
				x = myAnchorX;
				y = myAnchorY - d;
				break;
			case LEFT:
				x = myAnchorX - w;
				y = myAnchorY + a / 2;
				break;
			case CENTER:
				x = myAnchorX - w / 2;
				y = myAnchorY + a / 2;
				break;
			case RIGHT:
				x = myAnchorX;
				y = myAnchorY + a / 2;
				break;
			case BELOW_LEFT:
				x = myAnchorX - w;
				y = myAnchorY + a;
				break;
			case BELOW:
				x = myAnchorX - w / 2;
				y = myAnchorY + a;
				break;
			case BELOW_RIGHT:
				x = myAnchorX;
				y = myAnchorY + a;
				break;
			default:
				// Shouldn't happen.
				throw new IllegalStateException();
			}
//System.out.println ("bounds = " + bounds);
//System.out.println ("a = " + a);
//System.out.println ("d = " + d);
//System.out.println ("x = " + x);
//System.out.println ("y = " + y);

		// Draw label text.
		myFill.setGraphicsContext (g2d);
		g2d.drawString (myText, (float) x, (float) y);

		// Draw bullet if any.
		if (myBullet != null)
			{
			myBullet.draw (g2d, a, x, y);
			}

		// Restore font.
		g2d.setFont (oldFont);
		}

	/**
	 * Write this filled item to the given object output stream.
	 *
	 * @param  out  Object output stream.
	 *
	 * @exception  IOException
	 *     Thrown if an I/O error occurred.
	 */
	public void writeExternal
		(ObjectOutput out)
		throws IOException
		{
		super.writeExternal (out);
		out.writeObject (myText);
		out.writeDouble (myAnchorX);
		out.writeDouble (myAnchorY);
		out.writeByte ((byte) myPosition);
		out.writeObject (myFont);
		out.writeObject (myBullet);
		}

	/**
	 * Read this filled item from the given object input stream.
	 *
	 * @param  in  Object input stream.
	 *
	 * @exception  IOException
	 *     Thrown if an I/O error occurred.
	 * @exception  ClassNotFoundException
	 *     Thrown if any class needed to deserialize this filled item cannot be
	 *     found.
	 */
	public void readExternal
		(ObjectInput in)
		throws IOException, ClassNotFoundException
		{
		super.readExternal (in);
		myText = (String) in.readObject();
		myAnchorX = in.readDouble();
		myAnchorY = in.readDouble();
		myPosition = in.readByte();
		myFont = (Font) in.readObject();
		myBullet = (Bullet) in.readObject();
		}

	}
