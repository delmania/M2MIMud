head	1.3;
access;
symbols;
locks
	rjw2183:1.3; strict;
comment	@# @;


1.3
date	2004.08.12.01.21.57;	author rjw2183;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.01.19.49.47;	author rjw2183;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.10.17.00.41;	author rjw2183;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/**
 * The SessionAd is the class which contain all the information
 * about the session.
 *
 */
 
 package m2mimud.communications;
 
 import java.io.*;
 import java.util.Vector;
 import java.util.Iterator;
 import m2mimud.state.PlayerCharacter;
 import m2mimud.state.GameState;
 
 public class SessionAd
 implements Externalizable
 {
 
 	public String sessionName;      // The name of the session
	public int sessionCount;        // The number of players in the session
	public Game sessionHandle;      // Session's mulithandle		
	public GameState sessionState;  // The state of the game, ie the locations of the ponds, house, merchants, etc.
	
	/**
	 * Creates a new session as object
	 * @@param sessName The name of the session
	 * @@param sesscount The number of players in the session
	 * @@param sessHand The session multihandle, this is used to communicate to all members of the session
	 * @@param sessPlayers a vector containing the player data for all members of the session
	 * @@param sessState The current state of the session (ie the location of the modifications)
	 */
	public SessionAd( String sessName, Game sessHand, GameState sessState )
	{
		sessionName = sessName;		
		sessionHandle = sessHand;	
		sessionState = sessState;
		sessionCount = sessState.numPlayers();
	}
	
	/**
	 * This is a dummy constructor used by Externalizable
	 * NEVER CALL
	 */
	public SessionAd()
	{		
		sessionName = new String();
		sessionState = new GameState();		
	}
	
	/**
	 * Write the session ad to output
	 * @@param out The outpurt object to write to
	 */
	public void writeExternal( ObjectOutput out )
	throws IOException
	{		
		out.writeObject( sessionName );
		out.writeObject( sessionHandle );
		out.writeInt( sessionCount );
		out.writeObject( sessionState );							
	}
	
	/**
	 * Reads an object in from input
	 * @@param in The input object to read from
	 */
	public void readExternal( ObjectInput in )
	throws IOException, ClassNotFoundException
	{
		int numRecords;
		sessionName = (String)in.readObject();
		sessionHandle = (Game)in.readObject();
		sessionCount = in.readInt();
		sessionState = (GameState)in.readObject();				
	}
	
	public String toString()
	{
		return "Game: " + sessionName + ", number of players: " +
		sessionCount;
	}
}
@


1.2
log
@*** empty log message ***
@
text
@d32 1
a32 1
	public SessionAd( String sessName, int sessCount, Game sessHand, GameState sessState )
d34 1
a34 2
		sessionName = sessName;
		sessionCount = sessCount;
d37 1
@


1.1
log
@Initial revision
@
text
@d21 1
a21 2
	public Game sessionHandle;      // Session's mulithandle	
	public Vector sessionPlayers;   // The list of players in the session
a23 1
	
d32 1
a32 1
	public SessionAd( String sessName, int sessCount, Game sessHand, Vector sessPlayers, GameState sessState )
d36 1
a36 2
		sessionHandle = sessHand;
		sessionPlayers = sessPlayers;
d45 1
a45 2
	{
		sessionPlayers = new Vector();
d47 1
a47 1
		sessionState = new GameState();
d56 1
a56 4
	{
		int numRecords = sessionPlayers.size();
		Iterator recordsIter = sessionPlayers.iterator();
		
d60 1
a60 7
		out.writeInt( numRecords );
		while( recordsIter.hasNext() )
		{
			PlayerCharacter temp = (PlayerCharacter)recordsIter.next();
			out.writeObject( temp );
		}
		out.writeObject( sessionState );
a70 1
		
d74 1
a74 7
		numRecords = in.readInt();
		for( int i = 0; i < numRecords; i++ )
		{
			PlayerCharacter temp = (PlayerCharacter)in.readObject();
			sessionPlayers.add( temp );
		}
		sessionState = (GameState)in.readObject();
@
