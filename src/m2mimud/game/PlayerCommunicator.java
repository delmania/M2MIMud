 package m2mimud.game;
 import m2mimud.state.PlayerCharacter;
 import java.awt.Color;
 import m2mimud.state.TextMessage;

 /** 
  * The PlayerCommunicator is an interface for any object which wishes
  * to communicate with the player.  It provides the ability to send
  * system and error message to the user, as well as request input
  *
  * @author Robert Whitcomb
  * @version $Id: PlayerCommunicator.java,v 1.10 2005/01/12 14:03:17 rjw2183 Exp $
  */

 public interface PlayerCommunicator
 {
 	
	/**
	 * This function is used to send messaged to the user.
	 * The message is printed in black
	 * @param theObject The object to print.	 
	 */
	public void printMessage( Object theObject );
	
	/** 
	 * This function is used to print the text in the given color
	 * @param theObject The objerct to print
	 * @param theColor The color to print
	 */
	public void printMessage( Object theObject, Color theColor );
	 
	/** 
	 * This function is used to send an error message to the user
	 * @param theObject The object to print
	 */
	public void printError( Object theObject );
	
	/**
	 * Disables the communicator.
	 */
	public void disable();
	
	/**
	 * Enables the communicator
	 */
	 public void enable();
	 
	/**
	 * Informs the communicator who the active player is
	 */
	public void setActivePlayer( PlayerCharacter thePlayer ); 
	
	/**
	 * Sets the player's status
	 * @param equi True if the player has mental equilibrium
	 * @param balance True if the playter has physical balance
	 */
	public void setStatus( boolean equi, boolean balance );
	
	/**
	 * Prints a combat message
	 * @param line The line to print
	 * @param theColor The color to paint the text
	 * @param player A value which indicates if the player generated this text, 
	 *        or the player's target. If the message is generated by te player's target,
	 *        the message is bolded.
	 */
	public void printCombatMessage( String line, Color theColor, boolean player );
        
    /**
     * Prints a TextMessage object
     * @param theMessage The message to print
     */
    public void printTextMessage( TextMessage theMessage );
	
	/**
	 * Clears the combat window
	 */
	public void clearCombatLog();
	
	/**
	 * Clears the output window
	 */
	public void clear();
	
	/**
	 * Sets the name of the state.
	 * @param name The name of the state
	 */
	public void setStateName( String name );
	
	/**
	 * Sets the name of the current target
	 * @param name The name of the target
	 */
	public void setTarget( String name );
}
